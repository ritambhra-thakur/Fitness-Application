"""
Django settings for stretch project.

Generated by 'django-admin startproject' using Django 3.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.1/ref/settings/
"""

from pathlib import Path
import os
import sys
import environ

import datetime

env = environ.Env()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str('f$%5rw(n!g5y96jwp0(#zfuc)l%a*mi32i4qt2mz0jdt7^rs_h')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", default=False)

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=["*"])

SITE_ID = 1

SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
SECURE_SSL_REDIRECT = env.bool("SECURE_SSL_REDIRECT", default=False) # rediret http to https if true

DEVELOPMENT_SERVER = env.bool("DEVELOPMENT_SERVER", default=False)


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites' # Required by allauth
]

LOCAL_APPS = [
    'home',
    'users',
    'todo',
    'common',
    'challenge',
]

THIRD_FORCE_APPS = [
    "rest_framework",
    'rest_framework.authtoken',
    'rest_auth',
    'rest_auth.registration',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.facebook',
    'allauth.socialaccount.providers.google',
    'drf_yasg',
    'django_extensions',
    'rest_framework_jwt',
]

INSTALLED_APPS += LOCAL_APPS + THIRD_FORCE_APPS

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware', # Serve static in production without nginx or apache
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'stretch.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'stretch.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.1/ref/settings/#databases

DATABASES = {
    'default': {**env.db(), **{'ENGINE': 'django.db.backends.postgresql'}}
}

# When test, use sqlute as test DB
if sys.argv[1] == 'test':
    DATABASES['default'] = {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }

# Password validation
# https://docs.djangoproject.com/en/3.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static')
]

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'
# STATICFILES_STORAGE = 'users.storages.ForgivingManifestStaticFilesStorage' # If you want to ignore missing files

# more details can be found here http://whitenoise.evans.io/en/stable/
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage' # serve static in production without nginx or apache2

# AWS Bucket
# More details can be found here: https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html
AWS_ACCESS_KEY_ID = env.str("AWS_ACCESS_KEY_ID", "")
AWS_SECRET_ACCESS_KEY = env.str("AWS_SECRET_ACCESS_KEY", "")
AWS_STORAGE_BUCKET_NAME = env.str("AWS_STORAGE_BUCKET_NAME", "")
AWS_STORAGE_REGION = env.str("AWS_STORAGE_REGION", "")

IS_AWS_S3 = (
    AWS_ACCESS_KEY_ID and
    AWS_SECRET_ACCESS_KEY and
    AWS_STORAGE_BUCKET_NAME and
    AWS_STORAGE_REGION
)

if IS_AWS_S3:
    AWS_S3_FILE_OVERWRITE = False
    AWS_S3_CUSTOM_DOMAIN = env.str("AWS_S3_CUSTOM_DOMAIN", "")
    AWS_S3_OBJECT_PARAMETERS = {"CacheControl": "max-age=86400"}
    AWS_DEFAULT_ACL = env.str("AWS_DEFAULT_ACL", "public-read") #(optional; default is None which means the file will inherit the bucket’s permission)
    AWS_LOCATION = "media" # store files under directory `media/` in bucket `my-app-bucket`, If not set (optional: default is ‘’)
    AWS_AUTO_CREATE_BUCKET = env.bool("AWS_AUTO_CREATE_BUCKET", True)
    DEFAULT_FILE_STORAGE = env.str(
        "DEFAULT_FILE_STORAGE", "users.storages.CustomS3Storage"
    )


AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
]

# allauth config
ACCOUNT_EMAIL_VERIFICATION =  env.str("ACCOUNT_EMAIL_VERIFICATION", "optional")
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = 'email'
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
ACCOUNT_UNIQUE_EMAIL = True
LOGIN_REDIRECT_URL = "account_profiles"

ACCOUNT_ADAPTER = "users.auth_adapters.CustomAccountAdapter"
SOCIALACCOUNT_ADAPTER = "users.auth_adapters.CustomSocialAccountAdapter"


REST_AUTH_SERIALIZERS = {
   #  to fix 500 error
    "PASSWORD_RESET_SERIALIZER": "users.api.serializers.RESTPasswordSerializer",
}
REST_AUTH_REGISTER_SERIALIZERS = {
    # custom serializer for custom user models
    "REGISTER_SERIALIZER": "users.api.serializers.RESTSignupSerializer",
}

REST_USE_JWT = True
REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated'
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication', # details: https://jpadilla.github.io/django-rest-framework-jwt/
        # 'rest_framework.authentication.BasicAuthentication',
        # 'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination',
    'PAGE_SIZE': 20,
}

if DEVELOPMENT_SERVER:
    REST_FRAMEWORK['DEFAULT_AUTHENTICATION_CLASSES'].append(
        'users.authentication.CsrfExemptSessionAuthentication' # WARNING: Not Secure
    )

AUTH_USER_MODEL = "users.User" # Custom



JWT_AUTH = {
    'JWT_ENCODE_HANDLER':
    'rest_framework_jwt.utils.jwt_encode_handler',

    'JWT_DECODE_HANDLER':
    'rest_framework_jwt.utils.jwt_decode_handler',

    'JWT_PAYLOAD_HANDLER':
    'rest_framework_jwt.utils.jwt_payload_handler',

    'JWT_PAYLOAD_GET_USER_ID_HANDLER':
    'rest_framework_jwt.utils.jwt_get_user_id_from_payload_handler',

    'JWT_RESPONSE_PAYLOAD_HANDLER':
    'rest_framework_jwt.utils.jwt_response_payload_handler',

    'JWT_SECRET_KEY': SECRET_KEY,
    'JWT_GET_USER_SECRET_KEY': None,
    'JWT_PUBLIC_KEY': None,
    'JWT_PRIVATE_KEY': None,
    'JWT_ALGORITHM': 'HS256',
    'JWT_VERIFY': True,
    'JWT_VERIFY_EXPIRATION': True,
    'JWT_LEEWAY': 0,
    'JWT_EXPIRATION_DELTA': datetime.timedelta(days=90),
    'JWT_AUDIENCE': None,
    'JWT_ISSUER': None,

    'JWT_ALLOW_REFRESH': False,
    'JWT_REFRESH_EXPIRATION_DELTA': datetime.timedelta(days=90),

    'JWT_AUTH_HEADER_PREFIX': 'JWT',
    'JWT_AUTH_COOKIE': None,

}



EMAIL_HOST = env.str("EMAIL_HOST", "")
EMAIL_HOST_USER = env.str("EMAIL_HOST_USER", "")
EMAIL_HOST_PASSWORD = env.str("EMAIL_HOST_PASSWORD", "")
EMAIL_PORT = 587
EMAIL_USE_TLS = True
DEFAULT_FROM_EMAIL = env.str("DEFAULT_FROM_EMAIL", "")

EMAIL_BACKEND = "django.core.mail.backends.console.EmailBackend"

if EMAIL_HOST:
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

# Django push notification for django
# More details can be found here: https://fcm-django.readthedocs.io/en/latest/
FCM_DJANGO_SETTINGS = {
    "FCM_SERVER_KEY": env.str("FCM_SERVER_KEY", ""),
    "ONE_DEVICE_PER_USER": env.bool("ONE_DEVICE_PER_USER", False),
    "DELETE_INACTIVE_DEVICES": env.bool("ONE_DEVICE_PER_USER", False),
}

USE_API_DOCS = env.bool("USE_API_DOCS", True)



SOCIALACCOUNT_PROVIDERS = {
    'facebook': { # https://django-rest-auth.readthedocs.io/en/latest/installation.html#facebook
        "APP": {
            "client_id": env.str("FACEBOOK_CLIENT_ID", ""), # APP ID
            "secret": env.str("FACEBOOK_SECRET_KEY", ""),
        },
    },
    'google': { # https://django-rest-auth.readthedocs.io/en/latest/installation.html#facebook
        "APP": {
            "client_id": env.str("GOOGLE_CLIENT_ID", ""), # APP ID
            "secret": env.str("GOOGLE_SECRET_KEY", ""),
        },
    },
}


FACEBOOK_CLIENT_ID = env.str("FACEBOOK_CLIENT_ID", "")
FACEBOOK_SECRET_KEY = env.str("FACEBOOK_SECRET_KEY", "")

GOOGLE_CLIENT_ID = env.str("GOOGLE_CLIENT_ID", "")
GOOGLE_SECRET_KEY = env.str("GOOGLE_SECRET_KEY", "")



SOCIALACCOUNT_PROVIDERS = {
    'facebook': { # https://django-rest-auth.readthedocs.io/en/latest/installation.html#facebook
        "APP": {
            "client_id": FACEBOOK_CLIENT_ID, # APP ID
            "secret": FACEBOOK_SECRET_KEY,
        },
    },
    'google': { # https://django-rest-auth.readthedocs.io/en/latest/installation.html#google
        "APP": {
            "client_id": GOOGLE_CLIENT_ID, # APP ID
            "secret": GOOGLE_SECRET_KEY,
        },
    },
}

# Facebook integration for friend list and invitation
FACEBOOK_INTEGRATION_CLIENT_ID = env.str("FACEBOOK_INTEGRATION_CLIENT_ID", FACEBOOK_CLIENT_ID)
FACEBOOK_INTEGRATION_SECRET_KEY = env.str("FACEBOOK_INTEGRATION_SECRET_KEY", FACEBOOK_SECRET_KEY)
